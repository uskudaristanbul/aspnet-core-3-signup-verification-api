// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Helpers;

namespace WebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200718054856_entitiesall2")]
    partial class entitiesall2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("tekyerco_doory")
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApi.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WebApi.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("AddressType")
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnName("Area_id")
                        .HasColumnType("int");

                    b.Property<string>("BuildingName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CompanyNumber")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionToFind")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FlatNo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("GatePassword")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsBilling")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCompany")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("PostCodeId")
                        .HasColumnName("PostCode_id")
                        .HasColumnType("int");

                    b.Property<int?>("Region")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibleName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ResponsiblePhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ResponsibleSurname")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StreetId")
                        .HasColumnName("Street_id")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UserId")
                        .HasColumnName("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("PostCodeId");

                    b.HasIndex("Region");

                    b.HasIndex("StreetId");

                    b.HasIndex("UserId");

                    b.ToTable("Address","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.AreaCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaCodeText")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("CityId")
                        .HasColumnName("City_id")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnName("Country_id")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("District_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AreaCode","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Attributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Attribute","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Career", b =>
                {
                    b.Property<int>("CareerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Career_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnName("Account_id")
                        .HasColumnType("int");

                    b.Property<int?>("CareerAddressId")
                        .HasColumnName("CareerAddress_id")
                        .HasColumnType("int");

                    b.Property<int?>("CareerCityId")
                        .HasColumnName("CareerCity_id")
                        .HasColumnType("int");

                    b.Property<int?>("CareerDeliveryRegionId")
                        .HasColumnName("CareerDeliveryRegion_id")
                        .HasColumnType("int");

                    b.Property<string>("CareerName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("CareerPostCodeId")
                        .HasColumnName("CareerPostCode_id")
                        .HasColumnType("int");

                    b.Property<int?>("CareerType")
                        .HasColumnType("int");

                    b.HasKey("CareerId");

                    b.HasIndex("CareerAddressId");

                    b.HasIndex("CareerCityId");

                    b.HasIndex("CareerDeliveryRegionId");

                    b.HasIndex("CareerPostCodeId");

                    b.ToTable("Career","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.CareerOrder", b =>
                {
                    b.Property<int>("CareerId")
                        .HasColumnName("Career_id")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnName("Order_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignedTime")
                        .HasColumnType("datetime");

                    b.HasKey("CareerId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("Career-Order","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Cart_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("VoucherId")
                        .HasColumnName("Voucher_id")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cart","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CartItem_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CartId")
                        .HasColumnName("Cart_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool?>("IsInSaveLater")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ListPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("ProductId")
                        .HasColumnName("Product_id")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("SoldPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnName("Voucher_id")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("VoucherId");

                    b.ToTable("CartItem","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsTopProductCategory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int?>("StoreCategoryId")
                        .HasColumnName("StoreCategory_id")
                        .HasColumnType("int");

                    b.Property<int?>("UpCategoryId")
                        .HasColumnName("UpCategory_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreCategoryId");

                    b.HasIndex("UpCategoryId");

                    b.ToTable("Category","production");
                });

            modelBuilder.Entity("WebApi.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("City_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("CountryId")
                        .HasColumnName("Country_id")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnName("State_id")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("City","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Comment_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment1")
                        .HasColumnName("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CommentPoint")
                        .HasColumnType("decimal(18, 1)");

                    b.Property<int?>("OrderId")
                        .HasColumnName("Order_id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnName("Product_id")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Comment","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("Address_id")
                        .HasColumnType("int");

                    b.Property<string>("ContactOwnerType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("StoreId");

                    b.ToTable("Contact","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Country_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StateId")
                        .HasColumnName("State_id")
                        .HasColumnType("int");

                    b.HasKey("CountryId");

                    b.ToTable("Country","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int?>("PostCode")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Customer","sales");
                });

            modelBuilder.Entity("WebApi.Entities.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerId", "AddressId")
                        .HasName("PK_User-Address");

                    b.HasIndex("AddressId");

                    b.ToTable("Customer-Address","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.DeliveryRegion", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Region_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("RegionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime");

                    b.HasKey("RegionId")
                        .HasName("PK_Regions");

                    b.ToTable("DeliveryRegion","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("District_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostcodePart")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("DistrictId");

                    b.ToTable("District","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.FavoredProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("Product_id")
                        .HasColumnType("int");

                    b.Property<int>("CumstomerId")
                        .HasColumnName("Cumstomer_id")
                        .HasColumnType("int");

                    b.Property<int?>("AlternativePurchasedProductId")
                        .HasColumnName("AlternativePurchasedProduct_id")
                        .HasColumnType("int");

                    b.Property<int?>("CanceledNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<int?>("PurchasedNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnedNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SecondAlternativePurchasedProductId")
                        .HasColumnName("SecondAlternativePurchasedProduct_id")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdAlternativePurchasedProductId")
                        .HasColumnName("ThirdAlternativePurchasedProduct_id")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CumstomerId")
                        .HasName("PK_FavoredProducts");

                    b.HasIndex("CumstomerId");

                    b.HasIndex("StoreId");

                    b.ToTable("FavoredProduct","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.FavoredStore", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("Customer_id")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("Category_id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFavored")
                        .HasColumnType("bit");

                    b.HasKey("StoreId", "CustomerId")
                        .HasName("PK_FavoredStores");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("FavoredStore","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.FilterStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripton")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FilterStore","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.FilterStoreStore", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.Property<int>("StoreFeatureId")
                        .HasColumnName("StoreFeature_id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(2, 2)");

                    b.HasKey("StoreId", "StoreFeatureId")
                        .HasName("PK_Seller_SellerFeature");

                    b.HasIndex("StoreFeatureId");

                    b.ToTable("FilterStore-Store","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Image_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("Category_id")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnName("Comment_id")
                        .HasColumnType("int");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageSize")
                        .HasColumnType("int");

                    b.Property<int?>("ImageType")
                        .HasColumnType("int");

                    b.Property<int?>("MotherImage")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnName("Product_id")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.ToTable("Image","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.Layout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<string>("MainPageTopMenuItems")
                        .HasColumnName("MainPage_TopMenuItems")
                        .HasColumnType("nvarchar(700)")
                        .HasMaxLength(700);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Region")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Layout","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.LayoutItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Page")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("LayoutItem","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.LayoutLayoutItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LayoutId")
                        .HasColumnName("Layout_id")
                        .HasColumnType("int");

                    b.Property<int>("LayoutItemId")
                        .HasColumnName("LayoutItem_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Layout_LayoutItem","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("Address_id")
                        .HasColumnType("int");

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<int?>("AvenueId")
                        .HasColumnName("Avenue_id")
                        .HasColumnType("int");

                    b.Property<int?>("BoroughId")
                        .HasColumnName("Borough_id")
                        .HasColumnType("int");

                    b.Property<int?>("CarId")
                        .HasColumnName("Car_id")
                        .HasColumnType("int");

                    b.Property<int?>("CareerId")
                        .HasColumnName("Career_id")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnName("City_id")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnName("Country_id")
                        .HasColumnType("int");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<int?>("DistrictId")
                        .HasColumnName("District_id")
                        .HasColumnType("int");

                    b.Property<string>("Easting")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("LondonZone")
                        .HasColumnType("int");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Northing")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("PostcodeId")
                        .HasColumnName("Postcode_id")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.Property<int?>("StreetId")
                        .HasColumnName("Street_id")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfLocationId")
                        .HasColumnName("TypeOfLocation_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CareerId");

                    b.HasIndex("PostcodeId");

                    b.HasIndex("StoreId");

                    b.ToTable("Location","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("DeliveryCareerCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("DeliveryFeeTaken")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("DeliveryTotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("FirstTimeVisited")
                        .HasColumnType("datetime");

                    b.Property<int?>("FirstVisitResult")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnName("order_date")
                        .HasColumnType("date");

                    b.Property<int?>("OrderStatus")
                        .HasColumnName("order_status")
                        .HasColumnType("int");

                    b.Property<int?>("OrderType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequiredDate")
                        .HasColumnName("required_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("SecondTimeVisited")
                        .HasColumnType("datetime");

                    b.Property<int?>("SecondVisitResult")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SelectedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("SelectedDeliverySlotTime")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnName("shipped_date")
                        .HasColumnType("date");

                    b.Property<string>("SignImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SlotId")
                        .HasColumnName("Slot_id")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnName("staff_id")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("SubTotal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<string>("VisitResultDescription")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Order","sales");
                });

            modelBuilder.Entity("WebApi.Entities.OrderItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlternativeItemId")
                        .HasColumnName("AlternativeItem_id")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("IsDelivered")
                        .HasColumnType("int");

                    b.Property<decimal>("ListPrice")
                        .HasColumnName("list_price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("LocationId")
                        .HasColumnName("Location_id")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessPhase")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId")
                        .HasName("PK_order_items");

                    b.HasIndex("AlternativeItemId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem","sales");
                });

            modelBuilder.Entity("WebApi.Entities.OrderSlots", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("Order_id")
                        .HasColumnType("int");

                    b.Property<int>("SlotId")
                        .HasColumnName("Slot_id")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.HasKey("OrderId", "SlotId");

                    b.HasIndex("SlotId");

                    b.ToTable("Order_Slots","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Payment_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("CareerId")
                        .HasColumnName("Career_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaidTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentDescription")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.Property<int?>("SupplyId")
                        .HasColumnName("Supply_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TermEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TermStart")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.PostCodeDistance", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Item_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(14, 4)");

                    b.Property<int>("PostCodeId")
                        .HasColumnName("PostCode_id")
                        .HasColumnType("int");

                    b.Property<int>("SecondPostCodeId")
                        .HasColumnName("SecondPostCode_id")
                        .HasColumnType("int");

                    b.HasKey("ItemId")
                        .HasName("PK_PostCodes-Distance_1");

                    b.HasIndex("PostCodeId");

                    b.HasIndex("SecondPostCodeId");

                    b.ToTable("PostCode-Distance","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.PostCodeDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnName("City_id")
                        .HasColumnType("int");

                    b.Property<int?>("PostCodeAreaId")
                        .HasColumnName("PostCodeArea_id")
                        .HasColumnType("int");

                    b.Property<string>("PostCodeDistrict1")
                        .HasColumnName("PostCodeDistrict")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("PostCodeDistrict","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.PostCodeSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PostCodeAreaId")
                        .HasColumnName("PostCodeArea_id")
                        .HasColumnType("int");

                    b.Property<string>("PostCodeSector1")
                        .HasColumnName("PostCodeSector")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("PostCodeSector","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Postcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaCodeId")
                        .HasColumnName("AreaCode_id")
                        .HasColumnType("int");

                    b.Property<string>("Latitute")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("LocationId")
                        .HasColumnName("Location_id")
                        .HasColumnType("int");

                    b.Property<int?>("LondonZone")
                        .HasColumnType("int");

                    b.Property<string>("Longitute")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("PostCodeDistrictId")
                        .HasColumnName("PostCodeDistrict_id")
                        .HasColumnType("int");

                    b.Property<string>("PostcodeText")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("SectorId")
                        .HasColumnName("Sector_id")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaCodeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PostCodeDistrictId");

                    b.HasIndex("SectorId");

                    b.ToTable("Postcode","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.PostcodeDeliveryDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AvailableDeliveryDate")
                        .HasColumnType("date");

                    b.Property<bool?>("DoesServiceProvide")
                        .HasColumnType("bit");

                    b.Property<string>("Postcode")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<int?>("ServiceLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Postcode_DeliveryDate","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.PostcodeStores", b =>
                {
                    b.Property<int>("PostCodeId")
                        .HasColumnName("PostCode_id")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("DoesStoreDelivery")
                        .HasColumnType("int");

                    b.Property<int?>("IsServiceActive")
                        .HasColumnType("int");

                    b.HasKey("PostCodeId", "StoreId")
                        .HasName("PK_Postcode_Stores_1");

                    b.HasIndex("StoreId");

                    b.ToTable("Postcode_Stores","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Product_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnName("Brand_id")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnName("Category_id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MotherProductId")
                        .HasColumnName("MotherProduct_id")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfSold")
                        .HasColumnType("int");

                    b.Property<int?>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("Product_name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Sku")
                        .HasColumnName("SKU")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product","production");
                });

            modelBuilder.Entity("WebApi.Entities.ProductAlternateProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("Product_id")
                        .HasColumnType("int");

                    b.Property<int>("RelatedProductId")
                        .HasColumnName("RelatedProduct_id")
                        .HasColumnType("int");

                    b.Property<int?>("RelationPower")
                        .HasColumnType("int");

                    b.Property<int?>("RelationType")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "RelatedProductId")
                        .HasName("PK_Products-AlternativePorducts");

                    b.HasIndex("RelatedProductId");

                    b.ToTable("Product-AlternateProduct","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.ProductBrand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brand_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnName("brand_name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("ImageId")
                        .HasColumnName("Image_id")
                        .HasColumnType("int");

                    b.HasKey("BrandId")
                        .HasName("PK__Brands__5E5A8E2705218EA9");

                    b.ToTable("ProductBrand","production");
                });

            modelBuilder.Entity("WebApi.Entities.ProductsStores", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("Product_id")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnName("SKU")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("StockAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("StockAmountType")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("StoreDiscountedPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("StorePrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("StoreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Products-Stores","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Purchase_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("AmountRemained")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("OrderId")
                        .HasColumnName("Order_id")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.ToTable("Purchase","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.PurchaseItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Item_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CareerId")
                        .HasColumnName("Career_id")
                        .HasColumnType("int");

                    b.Property<string>("ItemBarcode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("LocationId")
                        .HasColumnName("Location_id")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessPhase")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("Product_id")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnName("Purchase_id")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseStatus")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.HasKey("ItemId")
                        .HasName("PK_PurchaseItems_1");

                    b.HasIndex("CareerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("StoreId");

                    b.ToTable("PurchaseItem","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.Region", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Area_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("CityId")
                        .HasColumnName("City_id")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnName("Country_id")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("District_id")
                        .HasColumnType("int");

                    b.HasKey("AreaId")
                        .HasName("PK_Areas");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Region","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.RegionStreet", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnName("Region_id")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnName("Street_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("date");

                    b.HasKey("RegionId", "StreetId")
                        .HasName("PK_Regions-Streets");

                    b.HasIndex("StreetId");

                    b.ToTable("Region-Street","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.SellerBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SellerBrand","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.ShopGroup", b =>
                {
                    b.Property<int>("ShopGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShopGroup_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnName("Category_id")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("Customer_id")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.HasKey("ShopGroupId");

                    b.ToTable("ShopGroup","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.ShopGroupProduct", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Item_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnName("Product_id")
                        .HasColumnType("int");

                    b.Property<int?>("ShopGroupId")
                        .HasColumnName("ShopGroup_id")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.ToTable("ShopGroup-Product","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Btw1114available")
                        .HasColumnName("Btw_11_14Available")
                        .HasColumnType("bit");

                    b.Property<bool?>("Btw1417available")
                        .HasColumnName("Btw_14_17Available")
                        .HasColumnType("bit");

                    b.Property<bool?>("Btw1720available")
                        .HasColumnName("Btw_17_20Available")
                        .HasColumnType("bit");

                    b.Property<bool?>("Btw2023available")
                        .HasColumnName("Btw_20_23Available")
                        .HasColumnType("bit");

                    b.Property<bool?>("Btw811available")
                        .HasColumnName("Btw_8_11Available")
                        .HasColumnType("bit");

                    b.Property<bool?>("ExpressDelivery")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnName("Order_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SlotDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Slot","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.SlotPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Btw1114available")
                        .HasColumnName("Btw_11_14Available")
                        .HasColumnType("bit");

                    b.Property<bool?>("Btw1417available")
                        .HasColumnName("Btw_14_17Available")
                        .HasColumnType("bit");

                    b.Property<bool?>("Btw1720available")
                        .HasColumnName("Btw_17_20Available")
                        .HasColumnType("bit");

                    b.Property<bool?>("Btw2023available")
                        .HasColumnName("Btw_20_23Available")
                        .HasColumnType("bit");

                    b.Property<bool?>("Btw811available")
                        .HasColumnName("Btw_8_11Available")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("CloseTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("DeliveryPrice10km")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("DeliveryPrice1km")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("DeliveryPrice2km")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("DeliveryPrice5km")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("DeliveryPricePerkm")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("DescriptionLimitedAvailable")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DescriptionNotAvailable")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("ExpressDeliveryFee")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<bool?>("ExpressDeliveryIsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("GeneralDefaultSlot")
                        .HasColumnType("bit");

                    b.Property<string>("GeneralDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("OpenTime")
                        .HasColumnType("time");

                    b.Property<decimal?>("ServiceFeeForUnder")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<int?>("ServiceLevel")
                        .HasColumnType("int");

                    b.Property<decimal?>("ServiceLevelDeliveryFee")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SlotPattern","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staff_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Active")
                        .HasColumnName("active")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ__Staffs__AB6E61640B97E2B6");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Staff","sales");
                });

            modelBuilder.Entity("WebApi.Entities.Stock", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnName("store_id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("StoreSalePrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("StoreWholePrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("StoreId", "ProductId")
                        .HasName("PK__Stocks__E68284D31D1FFF5D");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock","production");
                });

            modelBuilder.Entity("WebApi.Entities.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnName("Brand_id")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnName("City_id")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnName("Contact_id")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnName("Country_id")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralCatInfo")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("HygieneRate")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool?>("IsHalal")
                        .HasColumnType("bit");

                    b.Property<string>("LogoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostCodeId")
                        .HasColumnName("PostCode_id")
                        .HasColumnType("int");

                    b.Property<string>("PreviewUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Promotion")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Slogan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreBrand")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("StoreCategoryId")
                        .HasColumnName("StoreCategory_id")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnName("store_name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("StoreSize")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WarehouseType")
                        .HasColumnType("int");

                    b.HasKey("StoreId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PostCodeId");

                    b.HasIndex("StoreCategoryId");

                    b.ToTable("Store","sales");
                });

            modelBuilder.Entity("WebApi.Entities.StoreCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Up")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Up");

                    b.ToTable("StoreCategory","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Street_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Area")
                        .HasColumnType("int");

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("StreetId");

                    b.HasIndex("Area");

                    b.HasIndex("City");

                    b.HasIndex("Country");

                    b.ToTable("Street","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.Supplier", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Purchase_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("RelatedOrderId")
                        .HasColumnName("RelatedOrder_id")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnName("Store_id")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId")
                        .HasName("PK_Supplies");

                    b.HasIndex("RelatedOrderId");

                    b.HasIndex("StoreId");

                    b.ToTable("Supplier","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Sirname")
                        .HasColumnName("sirname")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("User","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.UserShoppingCartProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("AmountType")
                        .HasColumnType("text");

                    b.Property<int?>("CouponId")
                        .HasColumnName("Coupon_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("DiscountDescription")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<decimal?>("ListPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("NumberOfPiece")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnName("Product_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("UserId")
                        .HasColumnName("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User_ShoppingCartProducts","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Voucher_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("VoucherCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VoucherDescription")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("VoucherId");

                    b.ToTable("Voucher","dbo");
                });

            modelBuilder.Entity("WebApi.Entities.WishList", b =>
                {
                    b.Property<int>("WishListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WishList_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerId")
                        .HasColumnName("Customer_id")
                        .HasColumnType("int");

                    b.HasKey("WishListId");

                    b.HasIndex("CustomerId");

                    b.ToTable("WishList","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.WishlistItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnName("Product_id")
                        .HasColumnType("int");

                    b.Property<int?>("WishListId")
                        .HasColumnName("WishList_id")
                        .HasColumnType("int");

                    b.HasKey("ItemId")
                        .HasName("PK_WishlistItems");

                    b.HasIndex("ProductId");

                    b.HasIndex("WishListId");

                    b.ToTable("WishlistItem","tekyerco_kozmi");
                });

            modelBuilder.Entity("WebApi.Entities.Account", b =>
                {
                    b.OwnsMany("WebApi.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("AccountId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("AccountId");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner("Account")
                                .HasForeignKey("AccountId");
                        });
                });

            modelBuilder.Entity("WebApi.Entities.Address", b =>
                {
                    b.HasOne("WebApi.Entities.Region", "Area")
                        .WithMany("Address")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_Address_Area");

                    b.HasOne("WebApi.Entities.Postcode", "PostCode")
                        .WithMany("Address")
                        .HasForeignKey("PostCodeId")
                        .HasConstraintName("FK_Address_Postcodes");

                    b.HasOne("WebApi.Entities.DeliveryRegion", "RegionNavigation")
                        .WithMany("Address")
                        .HasForeignKey("Region")
                        .HasConstraintName("FK_Address_DeliveryRegions");

                    b.HasOne("WebApi.Entities.Street", "Street")
                        .WithMany("Address")
                        .HasForeignKey("StreetId")
                        .HasConstraintName("FK_Address_Streets");

                    b.HasOne("WebApi.Entities.User", "User")
                        .WithMany("Address")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Address_User");
                });

            modelBuilder.Entity("WebApi.Entities.Career", b =>
                {
                    b.HasOne("WebApi.Entities.Address", "CareerAddress")
                        .WithMany("Career")
                        .HasForeignKey("CareerAddressId")
                        .HasConstraintName("FK_Careers_Address");

                    b.HasOne("WebApi.Entities.City", "CareerCity")
                        .WithMany("Career")
                        .HasForeignKey("CareerCityId")
                        .HasConstraintName("FK_Careers_City");

                    b.HasOne("WebApi.Entities.DeliveryRegion", "CareerDeliveryRegion")
                        .WithMany("Career")
                        .HasForeignKey("CareerDeliveryRegionId")
                        .HasConstraintName("FK_Careers_DeliveryRegions");

                    b.HasOne("WebApi.Entities.Postcode", "CareerPostCode")
                        .WithMany("Career")
                        .HasForeignKey("CareerPostCodeId")
                        .HasConstraintName("FK_Careers_Postcodes");
                });

            modelBuilder.Entity("WebApi.Entities.CareerOrder", b =>
                {
                    b.HasOne("WebApi.Entities.Career", "Career")
                        .WithMany("CareerOrder")
                        .HasForeignKey("CareerId")
                        .HasConstraintName("FK_Career-Order_Career-Order")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Order", "Order")
                        .WithMany("CareerOrder")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Career-Order_orders")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Cart", b =>
                {
                    b.HasOne("WebApi.Entities.Customer", "Customer")
                        .WithMany("Cart")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Cart_customers")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.CartItem", b =>
                {
                    b.HasOne("WebApi.Entities.Cart", "CartItemNavigation")
                        .WithOne("CartItem")
                        .HasForeignKey("WebApi.Entities.CartItem", "CartItemId")
                        .HasConstraintName("FK_CartItems_Cart")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Product", "Product")
                        .WithMany("CartItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_CartItems_products");

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("CartItem")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_CartItems_Store");

                    b.HasOne("WebApi.Entities.Voucher", "Voucher")
                        .WithMany("CartItem")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK_CartItems_Vouchers");
                });

            modelBuilder.Entity("WebApi.Entities.Category", b =>
                {
                    b.HasOne("WebApi.Entities.StoreCategory", "StoreCategory")
                        .WithMany("Category")
                        .HasForeignKey("StoreCategoryId")
                        .HasConstraintName("FK_Category_StoreCategory");

                    b.HasOne("WebApi.Entities.Category", "UpCategory")
                        .WithMany("InverseUpCategory")
                        .HasForeignKey("UpCategoryId")
                        .HasConstraintName("FK_categories_categories1");
                });

            modelBuilder.Entity("WebApi.Entities.City", b =>
                {
                    b.HasOne("WebApi.Entities.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Cities_Country");
                });

            modelBuilder.Entity("WebApi.Entities.Comment", b =>
                {
                    b.HasOne("WebApi.Entities.Order", "Order")
                        .WithMany("Comment")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Comment_Orders");

                    b.HasOne("WebApi.Entities.Product", "Product")
                        .WithMany("Comment")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Comment_Products");

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("Comment")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Comment_stores");
                });

            modelBuilder.Entity("WebApi.Entities.Contact", b =>
                {
                    b.HasOne("WebApi.Entities.Address", "Address")
                        .WithMany("Contact")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Contacts_Address");

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("Contact")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Contacts_Stores");
                });

            modelBuilder.Entity("WebApi.Entities.CustomerAddress", b =>
                {
                    b.HasOne("WebApi.Entities.Address", "Address")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Customer-Address_Address")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Customer", "Customer")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Customer-Address_customers")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.FavoredProduct", b =>
                {
                    b.HasOne("WebApi.Entities.Customer", "Cumstomer")
                        .WithMany("FavoredProduct")
                        .HasForeignKey("CumstomerId")
                        .HasConstraintName("FK_FavoredProducts_Customers")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Product", "Product")
                        .WithMany("FavoredProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_FavoredProducts_Products")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("FavoredProduct")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_FavoredProducts_Stores");
                });

            modelBuilder.Entity("WebApi.Entities.FavoredStore", b =>
                {
                    b.HasOne("WebApi.Entities.Category", "Category")
                        .WithMany("FavoredStore")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_FavoredStores_Categories");

                    b.HasOne("WebApi.Entities.Customer", "Customer")
                        .WithMany("FavoredStore")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_FavoredStores_Customers")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("FavoredStore")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_FavoredStores_Stores")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.FilterStoreStore", b =>
                {
                    b.HasOne("WebApi.Entities.FilterStore", "StoreFeature")
                        .WithMany("FilterStoreStore")
                        .HasForeignKey("StoreFeatureId")
                        .HasConstraintName("FK_Seller_SellerFeature_Seller_SellerFeature1")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("FilterStoreStore")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Seller_SellerFeature_Seller_SellerFeature")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Location", b =>
                {
                    b.HasOne("WebApi.Entities.Address", "Address")
                        .WithMany("LocationNavigation")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Locations_Address");

                    b.HasOne("WebApi.Entities.Career", "Career")
                        .WithMany("Location")
                        .HasForeignKey("CareerId")
                        .HasConstraintName("FK_Locations_Careers");

                    b.HasOne("WebApi.Entities.Postcode", "Postcode")
                        .WithMany("Location")
                        .HasForeignKey("PostcodeId")
                        .HasConstraintName("FK_Locations_Postcodes");

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("Location")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Locations_stores");
                });

            modelBuilder.Entity("WebApi.Entities.Order", b =>
                {
                    b.HasOne("WebApi.Entities.Staff", "Staff")
                        .WithMany("Order")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK__orders__staff_id__49C3F6B7");

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("Order")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__orders__store_id__48CFD27E")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Entities.Customer", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__orders__customer__47DBAE45")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.OrderItem", b =>
                {
                    b.HasOne("WebApi.Entities.OrderItem", "AlternativeItem")
                        .WithMany("InverseAlternativeItem")
                        .HasForeignKey("AlternativeItemId")
                        .HasConstraintName("FK_order_items_order_items");

                    b.HasOne("WebApi.Entities.Location", "Location")
                        .WithMany("OrderItem")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_OrderItems_Locations");

                    b.HasOne("WebApi.Entities.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__order_items__order__4D94879B")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Product", "Product")
                        .WithMany("OrderItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__order_ite__produ__4E88ABD4")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.OrderSlots", b =>
                {
                    b.HasOne("WebApi.Entities.Order", "Order")
                        .WithMany("OrderSlots")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Order_Slots_Order")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Slot", "Slot")
                        .WithMany("OrderSlots")
                        .HasForeignKey("SlotId")
                        .HasConstraintName("FK_Order_Slots_SlotPattern")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.PostCodeDistance", b =>
                {
                    b.HasOne("WebApi.Entities.Postcode", "PostCode")
                        .WithMany("PostCodeDistancePostCode")
                        .HasForeignKey("PostCodeId")
                        .HasConstraintName("FK_PostCodes-Distance_PostCodes-Distance")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Postcode", "SecondPostCode")
                        .WithMany("PostCodeDistanceSecondPostCode")
                        .HasForeignKey("SecondPostCodeId")
                        .HasConstraintName("FK_PostCodes-Distance_Postcodes")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Postcode", b =>
                {
                    b.HasOne("WebApi.Entities.AreaCode", "AreaCode")
                        .WithMany("Postcode")
                        .HasForeignKey("AreaCodeId")
                        .HasConstraintName("FK_Postcode_AreaCode");

                    b.HasOne("WebApi.Entities.Location", "LocationNavigation")
                        .WithMany("PostcodeNavigation")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Postcodes_Locations");

                    b.HasOne("WebApi.Entities.PostCodeDistrict", "PostCodeDistrict")
                        .WithMany("Postcode")
                        .HasForeignKey("PostCodeDistrictId")
                        .HasConstraintName("FK_Postcodes_PostCodeDistricts");

                    b.HasOne("WebApi.Entities.PostCodeSector", "Sector")
                        .WithMany("Postcode")
                        .HasForeignKey("SectorId")
                        .HasConstraintName("FK_Postcodes_PostCodeSectors");
                });

            modelBuilder.Entity("WebApi.Entities.PostcodeStores", b =>
                {
                    b.HasOne("WebApi.Entities.Postcode", "PostCode")
                        .WithMany("PostcodeStores")
                        .HasForeignKey("PostCodeId")
                        .HasConstraintName("FK_Postcode_Stores_Postcode")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("PostcodeStores")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Postcode_Stores_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Product", b =>
                {
                    b.HasOne("WebApi.Entities.ProductBrand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK__products__brand___3C69FB99")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApi.Entities.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_SubCategory");
                });

            modelBuilder.Entity("WebApi.Entities.ProductAlternateProduct", b =>
                {
                    b.HasOne("WebApi.Entities.Product", "Product")
                        .WithMany("ProductAlternateProductProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Products-AlternativePorducts_products")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Product", "RelatedProduct")
                        .WithMany("ProductAlternateProductRelatedProduct")
                        .HasForeignKey("RelatedProductId")
                        .HasConstraintName("FK_Products-AlternativePorducts_products1")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.ProductsStores", b =>
                {
                    b.HasOne("WebApi.Entities.Product", "Product")
                        .WithMany("ProductsStores")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Products-Stores_Product")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("ProductsStores")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Products-Stores_Store")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.PurchaseItem", b =>
                {
                    b.HasOne("WebApi.Entities.Career", "Career")
                        .WithMany("PurchaseItem")
                        .HasForeignKey("CareerId")
                        .HasConstraintName("FK_PurchaseItems_Careers");

                    b.HasOne("WebApi.Entities.Location", "Location")
                        .WithMany("PurchaseItem")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_PurchaseItems_Locations");

                    b.HasOne("WebApi.Entities.Product", "Product")
                        .WithMany("PurchaseItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PurchaseItems_products")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseItem")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_PurchaseItems_Purchases")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("PurchaseItem")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_PurchaseItems_stores");
                });

            modelBuilder.Entity("WebApi.Entities.Region", b =>
                {
                    b.HasOne("WebApi.Entities.City", "City")
                        .WithMany("Region")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Areas_Cities");

                    b.HasOne("WebApi.Entities.Country", "Country")
                        .WithMany("Region")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Areas_Countries");

                    b.HasOne("WebApi.Entities.District", "District")
                        .WithMany("Region")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Areas_Districts");
                });

            modelBuilder.Entity("WebApi.Entities.RegionStreet", b =>
                {
                    b.HasOne("WebApi.Entities.DeliveryRegion", "Region")
                        .WithMany("RegionStreet")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Regions-Streets_DeliveryRegions")
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Street", "Street")
                        .WithMany("RegionStreet")
                        .HasForeignKey("StreetId")
                        .HasConstraintName("FK_Regions-Streets_Streets")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Staff", b =>
                {
                    b.HasOne("WebApi.Entities.Staff", "Manager")
                        .WithMany("InverseManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK__Staffs__manager___2739D489");

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("Staff")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__staffs__store_id__440B1D61")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Stock", b =>
                {
                    b.HasOne("WebApi.Entities.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__stocks__product___52593CB8")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("Stock")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__stocks__store_id__5165187F")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.Store", b =>
                {
                    b.HasOne("WebApi.Entities.SellerBrand", "Brand")
                        .WithMany("Store")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Stores_Brands");

                    b.HasOne("WebApi.Entities.City", "City")
                        .WithMany("Store")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Stores_Cities");

                    b.HasOne("WebApi.Entities.Country", "Country")
                        .WithMany("Store")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Stores_Countries");

                    b.HasOne("WebApi.Entities.Postcode", "PostCode")
                        .WithMany("Store")
                        .HasForeignKey("PostCodeId")
                        .HasConstraintName("FK_Stores_Postcodes");

                    b.HasOne("WebApi.Entities.StoreCategory", "StoreCategory")
                        .WithMany("Store")
                        .HasForeignKey("StoreCategoryId")
                        .HasConstraintName("FK_Stores_Categories");
                });

            modelBuilder.Entity("WebApi.Entities.StoreCategory", b =>
                {
                    b.HasOne("WebApi.Entities.StoreCategory", "UpNavigation")
                        .WithMany("InverseUpNavigation")
                        .HasForeignKey("Up")
                        .HasConstraintName("FK_StoreCategories_StoreCategories1");
                });

            modelBuilder.Entity("WebApi.Entities.Street", b =>
                {
                    b.HasOne("WebApi.Entities.Region", "AreaNavigation")
                        .WithMany("Street")
                        .HasForeignKey("Area")
                        .HasConstraintName("FK_Streets_Areas");

                    b.HasOne("WebApi.Entities.City", "CityNavigation")
                        .WithMany("Street")
                        .HasForeignKey("City")
                        .HasConstraintName("FK_Streets_City");

                    b.HasOne("WebApi.Entities.Country", "CountryNavigation")
                        .WithMany("Street")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_Streets_Countries");
                });

            modelBuilder.Entity("WebApi.Entities.Supplier", b =>
                {
                    b.HasOne("WebApi.Entities.Order", "RelatedOrder")
                        .WithMany("Supplier")
                        .HasForeignKey("RelatedOrderId")
                        .HasConstraintName("FK_Supplies_orders");

                    b.HasOne("WebApi.Entities.Store", "Store")
                        .WithMany("Supplier")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_Supplies_stores");
                });

            modelBuilder.Entity("WebApi.Entities.WishList", b =>
                {
                    b.HasOne("WebApi.Entities.Customer", "Customer")
                        .WithMany("WishList")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_WishLists_Customers");
                });

            modelBuilder.Entity("WebApi.Entities.WishlistItem", b =>
                {
                    b.HasOne("WebApi.Entities.Product", "Product")
                        .WithMany("WishlistItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_WishlistItems_Products");

                    b.HasOne("WebApi.Entities.WishList", "WishList")
                        .WithMany("WishlistItem")
                        .HasForeignKey("WishListId")
                        .HasConstraintName("FK_WishlistItems_WishLists");
                });
#pragma warning restore 612, 618
        }
    }
}
